package {{packageName}};

import {{modelPackage}}.{{modelName}};
import org.springframework.data.jpa.repository.{{baseType}};
{{#includeCustomQueries}}
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
{{/includeCustomQueries}}
import org.springframework.stereotype.Repository;

{{#includePagination}}
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
{{/includePagination}}
import java.util.List;
import java.util.Optional;

@Repository
public interface {{repositoryName}} extends {{baseType}}<{{modelName}}, {{idType}}> {

{{#includeCustomQueries}}
    @Query("SELECT m FROM {{modelName}} m WHERE LOWER(m.name) LIKE LOWER(CONCAT('%', :name, '%'))")
    List<{{modelName}}> findByNameContainingIgnoreCase(@Param("name") String name);

    @Query("SELECT m FROM {{modelName}} m WHERE m.active = true")
    List<{{modelName}}> findActiveItems();

    @Query("SELECT COUNT(m) FROM {{modelName}} m WHERE m.active = true")
    Long countActiveItems();

    {{#includePagination}}
    @Query("SELECT m FROM {{modelName}} m WHERE LOWER(m.name) LIKE LOWER(CONCAT('%', :name, '%'))")
    Page<{{modelName}}> findByNameContainingIgnoreCase(@Param("name") String name, Pageable pageable);

    @Query("SELECT m FROM {{modelName}} m WHERE m.active = true")
    Page<{{modelName}}> findActiveItems(Pageable pageable);
    {{/includePagination}}
{{/includeCustomQueries}}
}
