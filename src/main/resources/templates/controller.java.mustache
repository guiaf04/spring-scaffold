package {{packageName}};

{{#includeSwagger}}
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
{{/includeSwagger}}
{{#includeValidation}}
import jakarta.validation.Valid;
{{/includeValidation}}
import {{modelPackage}}.{{modelName}};
import {{servicePackage}}.{{serviceName}};
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("{{basePath}}/{{resourcePath}}")
@RequiredArgsConstructor
@Slf4j
{{#includeSwagger}}
@Tag(name = "{{modelName}}", description = "API for {{resourcePath}} management")
{{/includeSwagger}}
public class {{controllerName}} {

    private final {{serviceName}} {{serviceInstanceName}};

    {{#includeCrud}}
    @GetMapping
    {{#includeSwagger}}
    @Operation(summary = "List all {{modelName}}s")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "List retrieved successfully"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    {{/includeSwagger}}
    public ResponseEntity<List<{{modelName}}>> findAll() {
        List<{{modelName}}> items = {{serviceInstanceName}}.findAll();
        return ResponseEntity.ok(items);
    }

    @GetMapping("/{id}")
    {{#includeSwagger}}
    @Operation(summary = "Find {{modelName}} by ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "{{modelName}} found"),
        @ApiResponse(responseCode = "404", description = "{{modelName}} not found")
    })
    {{/includeSwagger}}
    public ResponseEntity<{{modelName}}> findById(
            {{#includeSwagger}}@Parameter(description = "{{modelName}} ID"){{/includeSwagger}}
            @PathVariable Long id) {
        Optional<{{modelName}}> item = {{serviceInstanceName}}.findById(id);
        return item.map(ResponseEntity::ok)
                   .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    {{#includeSwagger}}
    @Operation(summary = "Create new {{modelName}}")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "{{modelName}} created successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid data")
    })
    {{/includeSwagger}}
    public ResponseEntity<{{modelName}}> create(
            {{#includeSwagger}}@Parameter(description = "{{modelName}} data"){{/includeSwagger}}
            {{#includeValidation}}@Valid{{/includeValidation}} @RequestBody {{modelName}} {{modelInstanceName}}) {
        {{modelName}} savedItem = {{serviceInstanceName}}.save({{modelInstanceName}});
        return ResponseEntity.status(HttpStatus.CREATED).body(savedItem);
    }

    @PutMapping("/{id}")
    {{#includeSwagger}}
    @Operation(summary = "Update existing {{modelName}}")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "{{modelName}} updated successfully"),
        @ApiResponse(responseCode = "404", description = "{{modelName}} not found"),
        @ApiResponse(responseCode = "400", description = "Invalid data")
    })
    {{/includeSwagger}}
    public ResponseEntity<{{modelName}}> update(
            {{#includeSwagger}}@Parameter(description = "{{modelName}} ID"){{/includeSwagger}}
            @PathVariable Long id,
            {{#includeSwagger}}@Parameter(description = "Updated {{modelName}} data"){{/includeSwagger}}
            {{#includeValidation}}@Valid{{/includeValidation}} @RequestBody {{modelName}} {{modelInstanceName}}) {
        
        if (!{{serviceInstanceName}}.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        
        {{modelInstanceName}}.setId(id);
        {{modelName}} updatedItem = {{serviceInstanceName}}.save({{modelInstanceName}});
        return ResponseEntity.ok(updatedItem);
    }

    @DeleteMapping("/{id}")
    {{#includeSwagger}}
    @Operation(summary = "Delete {{modelName}} by ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "{{modelName}} deleted successfully"),
        @ApiResponse(responseCode = "404", description = "{{modelName}} not found")
    })
    {{/includeSwagger}}
    public ResponseEntity<Void> delete(
            {{#includeSwagger}}@Parameter(description = "{{modelName}} ID"){{/includeSwagger}}
            @PathVariable Long id) {
        
        if (!{{serviceInstanceName}}.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        
        {{serviceInstanceName}}.deleteById(id);
        return ResponseEntity.noContent().build();
    }
    {{/includeCrud}}
}
