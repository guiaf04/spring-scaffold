name: Release to Maven Central

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        if [ -z "$GPG_PRIVATE_KEY" ]; then
          echo "ERROR: GPG_PRIVATE_KEY secret is not set"
          echo "Please configure GPG_PRIVATE_KEY and GPG_PASSPHRASE secrets"
          exit 1
        fi
        
        # Create GPG directory
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        
        # Import the GPG key
        echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --quiet --import
        
        # Configure GPG agent
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "batch" >> ~/.gnupg/gpg.conf
        
        # Restart GPG agent
        gpg-connect-agent reloadagent /bye || true
        
        # Set environment variable for Maven
        echo "MAVEN_GPG_PASSPHRASE=$GPG_PASSPHRASE" >> $GITHUB_ENV
        
        # Test GPG signing
        echo "Testing GPG signing capability..."
        echo "test" | gpg --batch --quiet --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback --detach-sign --armor

    - name: Configure Git user
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"

    - name: Update version in pom.xml
      if: github.event.inputs.version
      run: |
        mvn versions:set -DnewVersion=${{ github.event.inputs.version }}
        mvn versions:commit

    - name: Run tests
      run: mvn clean test

    - name: Run integration tests
      run: ./test-templates.sh

    - name: Deploy to Maven Central
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # Create Maven settings.xml with server configurations
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      https://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>central</id>
              <username>\${env.MAVEN_USERNAME}</username>
              <password>\${env.MAVEN_PASSWORD}</password>
            </server>
            <server>
              <id>gpg.passphrase</id>
              <passphrase>\${env.MAVEN_GPG_PASSPHRASE}</passphrase>
            </server>
          </servers>
        </settings>
        EOF
        
        # Deploy to Maven Central
        mvn clean deploy -Prelease \
          -DskipTests=true \
          --batch-mode \
          --show-version \
          -s ~/.m2/settings.xml

    - name: Create GitHub Release
      if: github.event.inputs.version
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          ## Changes in this Release
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Maven Central
          
          This release is available on Maven Central:
          
          ```xml
          <dependency>
              <groupId>io.github.guiaf04</groupId>
              <artifactId>spring-scaffold-cli</artifactId>
              <version>${{ github.event.inputs.version }}</version>
          </dependency>
          ```
        files: |
          target/spring-scaffold-cli-*.jar
          target/spring-scaffold-cli-*-sources.jar
          target/spring-scaffold-cli-*-javadoc.jar
        draft: false
        prerelease: false

    - name: Upload release assets
      if: github.event.inputs.version
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/spring-scaffold.jar
        asset_name: spring-scaffold-cli-${{ github.event.inputs.version }}.jar
        asset_content_type: application/java-archive
